services:

  postgres:
    container_name: postgres
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=stratio
      - POSTGRES_PASSWORD=12345678
      - POSTGRES_DB=genai
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-volume:/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d postgres" ]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  vault-server:
    image: hashicorp/vault:1.10.11
    container_name: vault-server
    ports:
      - '8200:8200'
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_DEV_ROOT_TOKEN_ID: 'root-token'
      VAULT_LOCAL_CONFIG: >
        {
            "default_lease_ttl": "168h",
            "max_lease_ttl": "720h",
            "disable_mlock": true
        }
    restart: unless-stopped

  genai-gateway:
    image: qa.int.stratio.com/stratio/genai-gateway:0.2.1
    container_name: genai-gateway
    ports:
      - '8082:8080'
    environment:
      LOCAL_DEV: 'true'
      LOCAL_PORT: '8080'
      GENAI_GATEWAY_SERVICE_NAME: 'genai-gateway.s000001-genai'
      VAULT_PROTOCOL: 'http'
      VAULT_HOST: 'vault-server'
      VAULT_PORT: '8200'
      VAULT_TOKEN: 'root-token'
      POSTGRES_DATASTORE_HOST: 'postgres'
    volumes:
      - genai-gateway-volume:/app/gateway_config
    depends_on:
      - vault-server
      - postgres
    restart: unless-stopped

  genai-api:
    image: qa.int.stratio.com/stratio/genai-api:0.3.1
    container_name: genai-api
    ports:
      - '8081:8080'
    environment:
      LOCAL_DEV: 'true'
      LOCAL_PORT: '8080'
      GENAI_API_SERVICE_NAME: 'genai-api.s000001-genai'
      GENAI_API_TENANT: 's000001'
      GENAI_API_POETRY_CACHE: 'true'
      GENAI_GATEWAY_URL: 'http://genai-gateway:8080'
      GENAI_GATEWAY_USE_SSL: 'false'
      VAULT_PROTOCOL: 'http'
      VAULT_HOST: 'vault-server'
      VAULT_PORT: '8200'
      VAULT_TOKEN: 'root-token'
      POSTGRES_DATASTORE_HOST: 'postgres'
    volumes:
      - genai-api-volume:/app/packages
    depends_on:
      - vault-server
      - genai-gateway
      - postgres
    restart: unless-stopped

  opensearch:
    # https://hub.docker.com/r/opensearchproject/opensearch
    image: opensearchproject/opensearch:2.6.0
    container_name: opensearch
    environment:
      - cluster.name=opensearch
      - discovery.type=single-node
      - plugins.security.disabled=true
      # Disable JVM heap memory swapping
      - bootstrap.memory_lock=true
      - plugins.ml_commons.only_run_on_ml_node=false
      # https://forum.opensearch.org/t/error-while-loading-ml-model-in-elasticsearch/13893
      - plugins.ml_commons.native_memory_threshold=100
      - "OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m"
      - "cluster.routing.allocation.disk.watermark.low=85%"
      - "cluster.routing.allocation.disk.watermark.high=90%"
      - "cluster.routing.allocation.disk.watermark.flood_stage=95%"
    ports:
      - "9200:9200"
    volumes:
      - opensearch-volume:/usr/share/opensearch/data:rw
    restart: unless-stopped

  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.6.0
    container_name: opensearch-dashboards
    environment:
      - "OPENSEARCH_HOSTS=[\"http://opensearch:9200\"]"
      - "DISABLE_SECURITY_DASHBOARDS_PLUGIN=true"
    ports:
      - "5601:5601"
    depends_on:
      - opensearch
    restart: unless-stopped

volumes:
  postgres-volume:
  genai-gateway-volume:
  genai-api-volume:
  opensearch-volume:

networks:
  default:
    name: genai_chain
